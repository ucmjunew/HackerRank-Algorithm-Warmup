#include <bits/stdc++.h>
#include <algorithm>                //to use the sort algorithm
/*Information about the sort algorithm built in
Most implementations use a hybrid algorithm like introsort, which combines quick-sort, heap-sort and insertion sort.
runtime : O(N log(N))

side note is that QuickSort is not always the fastest method.
average case is O(nlog(n)) complexity; however, worse case is O(n^2)
for a small number of inputs sorting with quick-sort tends to achieve the worst performance (insertion would be better)
[https://i.stack.imgur.com/ye9lg.gif]

The thing with Binary Search is that it has the same average and worst case performance O(log_2(n))
oh wait, I am talking abotu search now... not sort.
*/
using namespace std;
vector<string> split_string(string);

int birthdayCakeCandles(int n, vector<int> ar) {
    sort (ar.begin(),ar.begin()+n);             //this sorts the vector
    
    //so the biggest numbers would be in ar[n] now
    int tallestInt = ar[n-1];
    int count = 1;                              //starts at 1 because my neice will get at least one of the tallest ones
    for (int i=n-2 ; i>=0 ; i--){            //n-1 because we know the last one is the biggest.
        cout << "comparing " <<ar[i] << " to " << tallestInt <<endl; 
        if (ar[i] == tallestInt){
            count++;
        }
        else{
            break;                     //by adding this break, once it tests it is not correct, it will break and not go on  further.
        }
    }
    
    return count;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));           //output path?

    int n;                                          //the age
    cin >> n;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');    //ignore numbers that are too big

    string ar_temp_temp;                                    //declaring string for list of height
    getline(cin, ar_temp_temp);                             //input the list of strings

    vector<string> ar_temp = split_string(ar_temp_temp);    //splitting the string by the space and placing                                                                                         them in the array

    vector<int> ar(n);                                      //initializing a new array

    for (int ar_itr = 0; ar_itr < n; ar_itr++) {            //starting at 0 to the age of my neice
        int ar_item = stoi(ar_temp[ar_itr]);                //making the string an int

        ar[ar_itr] = ar_item;                               //placing the separated int into the array
    }

    int result = birthdayCakeCandles(n, ar);                //result is after the function returns with the amount of candles

    fout << result << "\n";

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
